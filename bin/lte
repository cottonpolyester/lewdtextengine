#!/usr/bin/env ruby

require 'gtk3'
require 'pp'

require 'lte'

## read command-line arguments (flags)

config = LTE::Config.new

flags = [
	LTE::Flag.new('',   '--config-dir', 'set config directory (default is $XDG_CONFIG_HOME/lte or ~/.config/lte)', lambda { |dir| config.config_dir = dir} , true, "CONFIG_DIR"),
	LTE::Flag.new('-v', '--verbose',    'show more output',                                                        lambda { config.verbose = true } ),
	LTE::Flag.new('-h', '--help',       'show help',                                                               lambda { puts LTE::Flag.gen_help_message(flags); exit 0 } )
]

LTE::Flag.process_all(ARGV, flags)

## start game

class MainWindow
	def initialize(config)
		@config = config

		Gtk.init

		# load the config file, if it exists

		@builder = Gtk::Builder::new
		@builder.add_from_file(@config.resource_dir + '/lte.glade')
		@builder.connect_signals do |handler|
			method(handler)
		end

		@builder.get_object('main_window').show

		Gtk.main
	end

	def update_player_stats
		@builder.get_object('player_health_label').text = 'HP ' + @profile.player.max_health.to_s + ' / ' + @profile.player.health.to_s

		health_bar = @builder.get_object 'player_health_levelbar'
		health_bar.max_value = @profile.player.max_health
		health_bar.value     = @profile.player.health

		@builder.get_object('player_manna_label').text = 'MP ' + @profile.player.max_manna.to_s + ' / ' + @profile.player.manna.to_s

		manna_bar = @builder.get_object 'player_manna_levelbar'
		manna_bar.max_value = @profile.player.max_manna
		manna_bar.value     = @profile.player.manna

		@builder.get_object('player_armor_value').text = @profile.player.armor.to_s

		@builder.get_object('player_damage_value').text = @profile.player.armor.to_s
	end

	def save_profile
		throw "save_profile(): @profile and @profile_file need to be defined!" if @profile.nil? or @profile_file.nil?

		File.open(@profile_file, 'w') do |pfile|
			Marshal.dump(@profile, pfile)
			puts "Dumped profile into #@profile_file"
		end
	end

	def load_profile
		throw "load_profile(): @profile_file needs to be defined!" if @profile_file.nil?

		File.open(@profile_file, 'r') do |pfile|
			@profile = Marshal.load(pfile)
			puts "Loaded profile from #@profile_file"
		end
	end

	# generic callbacks
	
	def gtk_main_quit
		Gtk.main_quit
	end

	def gtk_widget_show(widget, event)
		widget.hide
	end

	def gtk_widget_hide(widget, event)
		widget.hide
	end

	# specific callbacks
	
	## menu items
	
	def on_profile_new_menuitem_activate
		player = LTE::Player.new("Generic Player", "A perfectly generic player character")

		@profile = LTE::Profile.new(player)
	end

	def on_profile_open_menuitem_activate
		@builder.get_object('profile_open_filechooser_dialog').show
	end

	def on_profile_save_menuitem_activate
		if @profile
			if @profile_file
				save_profile
			else
				@builder.get_object('profile_save_filechooser_dialog').show
			end
		else
			@builder.get_object('no_profile_dialog').show
		end
	end

	def on_profile_save_as_menuitem_activate
		if @profile
			@builder.get_object('profile_save_filechooser_dialog').show
		else
			@builder.get_object('no_profile_dialog').show
		end
	end

	def on_profile_inspect_menuitem_activate
		@builder.get_object('profile_inspect_label').text = @profile.pretty_inspect
		@builder.get_object('profile_inspect_dialog').show
	end

	def on_content_load_menuitem_activate
		@builder.get_object('content_load_filechooser_dialog').show
	end

	def on_help_about_menuitem_activate
		@builder.get_object('about_dialog').show
	end

	## profile open filechooser
	
	def on_profile_open_filechooser_dialog_show(widget)
		if @profile_file
			widget.filename = File.dirname(@profile_file)
		else
			widget.current_folder = @config.config_dir + '/profiles/'
		end
	end

	def on_profile_open_filechooser_dialog_response(dialog, response)
		if response == Gtk::ResponseType::CANCEL
			dialog.hide
		elsif response == Gtk::ResponseType::ACCEPT
			dialog.hide
			@profile_file = dialog.filename
			load_profile
		end
	end

	## profile save filechooser

	def on_profile_save_filechooser_dialog_show(widget)
		if @profile_file
			widget.filename = File.dirname(@profile_file)
		else
			widget.current_folder = @config.config_dir + '/profiles/'
			widget.current_name   = "#{@profile.player.name.downcase.gsub(' ', '_')}.dat"
		end
	end

	def on_profile_save_filechooser_dialog_response(dialog, response)
		if response == Gtk::ResponseType::CANCEL
			dialog.hide
		elsif response == Gtk::ResponseType::ACCEPT
			@profile_file = dialog.filename
			dialog.hide

			save_profile
		end
	end

	## content load filechooser
	
	def on_content_load_filechooser_dialog_show(widget)
		widget.current_folder = @config.config_dir
	end

	def on_content_load_filechooser_dialog_response(dialog, response)
		if response == Gtk::ResponseType::CANCEL
			dialog.hide
		elsif response == Gtk::ResponseType::ACCEPT
			load dialog.filename
			dialog.hide
		end
	end

	## no profile dialog
	
	def on_no_profile_dialog_response(dialog, response_event)
		if response_event == Gtk::ResponseType::OK
			dialog.hide
		end
	end

	## profile inspect dialog
	
	def on_profile_inspect_dialog_response(dialog, response_event)
		if response_event == Gtk::ResponseType::OK
			dialog.hide
		end
	end
end

window = MainWindow.new(config)
