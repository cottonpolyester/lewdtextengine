#!/usr/bin/env ruby

require 'optparse'
require 'gtk3'
require 'pp'

require 'lte'

module LTE
        class MainWindow
                def initialize
                        @config_dir   = ( ENV['XDG_CONFIG_HOME'].chomp('/') ||
                                          File.expand_path('~/.config') ) + '/lte'
                        @resource_dir = File.expand_path('../resources', File.dirname(__FILE__))
                        @game = nil

                        opt_parser = OptionParser.new do |opts|
                                opts.banner = "usage: lte [options...]"

                                opts.on("--config-dir DIR", "Search for config files in DIR") do |dir|
                                        @config_dir = dir
                                end

                                opts.on("--resource-dir DIR", "Search for resource files in DIR") do |dir|
                                        @resource_dir = dir
                                end

                                opts.on("-l", "--load FILE", "Load FILE") do |file|
                                        load file
                                end

                                opts.on_tail("-h", "--help", "Show this message") do
                                        puts opts
                                        exit
                                end

                                opts.on_tail("--version", "Show version") do
                                        puts LTE::Version
                                        exit
                                end
                        end

                        opt_parser.parse! ARGV

                        Gtk.init

                        @builder = Gtk::Builder::new
                        @builder.add_from_file(@resource_dir + '/lte.glade')
                        @builder.connect_signals { |handler| method(handler) }

                        @builder.get_object('main_window').show

                        Gtk.main
                end

                def start_game
                        update_player_stats

                        @builder.get_object('content_label').text = "Hello #{@game.player.name}"
                end

                def update_player_stats
                        @builder.get_object('battle_stats_health_label').text = 'HP ' + @game.player.max_health.to_s + ' / ' + @game.player.health.to_s

                        health_bar = @builder.get_object 'battle_stats_health_levelbar'
                        health_bar.max_value = @game.player.max_health
                        health_bar.value     = @game.player.health

                        @builder.get_object('battle_stats_manna_label').text = 'MP ' + @game.player.max_manna.to_s + ' / ' + @game.player.manna.to_s

                        manna_bar = @builder.get_object 'battle_stats_manna_levelbar'
                        manna_bar.max_value = @game.player.max_manna
                        manna_bar.value     = @game.player.manna

                        @builder.get_object('battle_stats_armor_value').text = @game.player.armor.to_s

                        @builder.get_object('battle_stats_damage_value').text = @game.player.armor.to_s
                end

                # generic callbacks
                
                def gtk_main_quit
                        Gtk.main_quit
                end

                def gtk_widget_show(widget, event)
                        widget.hide
                end

                def gtk_widget_hide(widget, event)
                        widget.hide
                end

                # specific callbacks
                
                ## menu items
                
                def on_game_save_menuitem_activate
                        if @game and @game_save_file
                                @game.save_to_file(@game_save_file)
                        else
                                @builder.get_object('game_save_filechooser_dialog').show
                        end
                end

                ## game new dialog
                
                def on_game_new_dialog_show(widget)
                        treestore = @builder.get_object('content_treestore')

                        treestore.clear

                        LTE.content.each do |c| 
                                parent = treestore.append(nil)
                                parent[0] = c.active
                                parent[1] = c.name
                                parent[2] = c.description
                        end
                end

                def on_content_cellrenderertoggle_toggled(renderer, path)
                        iter = @builder.get_object('content_treestore').get_iter(path)
                        iter[0] = (not iter[0])
                end

                def on_game_new_dialog_response(dialog, response)
                        if response == Gtk::ResponseType::CANCEL or response == Gtk::ResponseType::ACCEPT
                                dialog.hide
                        end

                        if response == Gtk::ResponseType::ACCEPT
                                @builder.get_object('content_treestore').each do |model, path, iter|
                                        if iter[0] # if include toggle is set
                                                content = nil

                                                LTE.content.each do |c|
                                                        content = c if iter[1] == c.name
                                                end

                                                @game = content.apply @game
                                        end
                                end
                                
                                start_game
                        end
                end

                ## game open filechooser
                
                def on_game_open_filechooser_dialog_show(widget)
                        if @game_save_file
                                widget.filename = File.dirname(@game_save_file)
                        else
                                widget.current_folder = @config_dir + '/saves/'
                        end
                end

                def on_game_open_filechooser_dialog_response(dialog, response)
                        if response == Gtk::ResponseType::CANCEL or response == Gtk::ResponseType::ACCEPT
                                dialog.hide
                        end

                        if response == Gtk::ResponseType::ACCEPT
                                @game = Game.load_from_file(@game_save_file = dialog.filename)
                                start_game
                        end
                end

                ## game save filechooser

                def on_game_save_filechooser_dialog_show(widget)
                        if @game
                                if @game_save_file
                                        widget.filename = File.dirname(@game_save_file)
                                else
                                        widget.current_folder = @config_dir + '/players/'
                                        widget.current_name   = "#{@game.player.name.downcase.gsub(' ', '_')}.dat"
                                end
                        else
                                widget.hide
                                @builder.get_object('no_game_dialog').show
                        end
                end

                def on_game_save_filechooser_dialog_response(dialog, response)
                        if response == Gtk::ResponseType::CANCEL or response == Gtk::ResponseType::ACCEPT
                                dialog.hide
                        end

                        if response == Gtk::ResponseType::ACCEPT
                                @game.save_to_file(@game_save_file = dialog.filename)
                        end
                end

                ## game inspect dialog
                
                def on_game_inspect_dialog_show
                        @builder.get_object('game_inspect_label').text = @game.pretty_inspect
                end
                
                def on_game_inspect_dialog_response(dialog, response_event)
                        if response_event == Gtk::ResponseType::OK
                                dialog.hide
                        end
                end

                ## no game dialog
                
                def on_no_game_dialog_response(dialog, response_event)
                        if response_event == Gtk::ResponseType::OK
                                dialog.hide
                        end
                end

                ## content load filechooser
                
                def on_content_load_filechooser_dialog_show(widget)
                        widget.current_folder = @config_dir
                end

                def on_content_load_filechooser_dialog_response(dialog, response)
                        if response == Gtk::ResponseType::CANCEL
                                dialog.hide
                        elsif response == Gtk::ResponseType::ACCEPT
                                dialog.hide
                                require dialog.filename
                        end
                end
        end
end

window = LTE::MainWindow.new
